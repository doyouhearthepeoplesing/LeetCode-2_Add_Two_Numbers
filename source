/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* head = new ListNode(0);
        ListNode* p;
        p = head;
        int dip = 0;
        while(l1->next!=NULL && l2->next!=NULL){
            if(dip) p->val = l1->val + l2->val + 1;
            else p->val = l1->val + l2->val;
            if(p->val>=10){
                p->val = p->val - 10;
                dip = 1;
            }
            else dip = 0;
            p->next = new ListNode(0);
            p = p->next;
            l1 = l1->next;
            l2 = l2->next;
        }
        p->val = l1->val + l2->val + dip;
        if(p->val >= 10){p->val = p->val - 10; dip = 1;}
        else{dip = 0;}
        l1 = l1->next;
        l2 = l2->next;
        if(l1 == NULL){
            while(l2 != NULL){
                p->next = new ListNode(0);
                p = p->next;
                p->val = l2->val + dip;
                if(p->val >= 10){dip = 1; p->val = p->val - 10;}
                else{dip = 0;}
                //p->next = new ListNode(0);
                //p = p->next;
                l2 = l2->next;
            }
            //p->next = new ListNode(0);
            //p->val = l2->val + dip;
        }
        else if(l2 == NULL){
            while(l1 != NULL){
                p->next = new ListNode(0);
                p = p->next;
                p->val = l1->val + dip;
                if(p->val >= 10){dip = 1; p->val = p->val - 10;}
                else{dip = 0;}
                //p->next = new ListNode(0);
                //p = p->next;
                l1 = l1->next;
            }
            //p->next = new ListNode(0);
            //p->val = l1->val + dip;
        }
        if(dip){
            p->next = new ListNode(0);
            p = p->next;
            p->val = 1;
        }
        return head;
    }
};
